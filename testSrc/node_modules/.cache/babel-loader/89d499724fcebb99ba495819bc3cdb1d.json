{"remainingRequest":"/Users/erin/project/hello-world/testSrc/node_modules/babel-loader/lib/index.js!/Users/erin/project/hello-world/testSrc/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/erin/project/hello-world/testSrc/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/erin/project/hello-world/testSrc/src/components/mapDrag.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/erin/project/hello-world/testSrc/src/components/mapDrag.vue","mtime":1616080467873},{"path":"/Users/erin/project/hello-world/testSrc/node_modules/cache-loader/dist/cjs.js","mtime":1611492586366},{"path":"/Users/erin/project/hello-world/testSrc/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/erin/project/hello-world/testSrc/node_modules/cache-loader/dist/cjs.js","mtime":1611492586366},{"path":"/Users/erin/project/hello-world/testSrc/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/erin/project/hello-world/testSrc/node_modules/cache-loader/dist/cjs.js","mtime":1611492586366},{"path":"/Users/erin/project/hello-world/testSrc/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/erin/project/hello-world/testSrc/node_modules/cache-loader/dist/cjs.js","mtime":1611492586366},{"path":"/Users/erin/project/hello-world/testSrc/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/erin/project/hello-world/testSrc/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport remoteLoad from '@/utils/remoteLoad.js';\nimport { MapKey, MapCityName } from '@/config/config';\nimport testData from '@/mock.js';\nimport dialog from \"../utils/dialog\";\nexport default {\n  props: ['lat', 'lng'],\n  data: function data() {\n    return {\n      searchKey: '',\n      placeSearch: null,\n      dragStatus: false,\n      AMapUI: null,\n      AMap: null,\n      startY: 0,\n      isBottom: true,\n      lang: 'zh-CN'\n    };\n  },\n  watch: {\n    searchKey: function searchKey() {\n      if (this.searchKey === '') {\n        this.placeSearch.clear();\n      }\n    }\n  },\n  mounted: function mounted() {},\n  methods: {\n    setLang: function setLang(lang) {\n      this.$common.setLang(lang);\n      this.$forceUpdate();\n    },\n    ConvertDegreesToRadians: function ConvertDegreesToRadians(degrees) {\n      return degrees * Math.PI / 180;\n    },\n    ConvertRadiansToDegrees: function ConvertRadiansToDegrees(radian) {\n      return radian * 180.0 / Math.PI;\n    },\n    HaverSin: function HaverSin(theta) {\n      var v = Math.sin(theta / 2);\n      return v * v;\n    },\n    getDistance: function getDistance(latitude1, longitude1, latitude, longitude) {\n      var app = this;\n      var lat1 = app.ConvertDegreesToRadians(latitude1),\n          lon1 = app.ConvertDegreesToRadians(longitude1),\n          lat2 = app.ConvertDegreesToRadians(latitude),\n          lon2 = app.ConvertDegreesToRadians(longitude),\n          vLon = Math.abs(lon1 - lon2),\n          vLat = Math.abs(lat1 - lat2),\n          h = app.HaverSin(vLat) + Math.cos(lat1) * Math.cos(lat2) * app.HaverSin(vLon);\n      return Math.round(12742 * Math.asin(Math.sqrt(h)) * 1000);\n    },\n    testDialog: function testDialog() {\n      var d = this.getDistance1(40.22077, 116.23128, 34.23053, 108.93425);\n      console.log(99999, d);\n      var dialog = this.$common.dialog1,\n          app = this;\n\n      var imgSrc = require('../assets/img/map.png');\n\n      dialog.open({\n        // type:\"tip\",\n        title: '',\n        hideCloseBtn: this.show,\n        content: '<div @click=\"test\">暂时部署不足hiuhiuhohggygilo;<br></div>',\n        data: {\n          imgSrc: imgSrc,\n          show: true\n        },\n        methods: {\n          test: function test() {\n            console.log(12, this);\n            this.show = false; // this.parent.close();\n          }\n        },\n        isFull: true,\n        btns: [{\n          value: '取消',\n          action: function action(obj) {\n            dialog.close();\n          }\n        }]\n      });\n    },\n    // 搜索\n    handleSearch: function handleSearch() {\n      if (this.searchKey) {\n        this.placeSearch.search(this.searchKey);\n      }\n    },\n    // 根据经纬度计算距离，参数分别为第一点的纬度，经度；第二点的纬度，经度\n    getDistance1: function getDistance1(lat1, lng1, lat2, lng2) {\n      function rad(degrees) {\n        return degrees * Math.PI / 180;\n      }\n\n      ;\n      var radLat1 = rad(lat1);\n      var radLat2 = rad(lat2);\n      var a = radLat1 - radLat2;\n      var b = rad(lng1) - rad(lng2);\n      var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)));\n      s = s * 6378.137; // EARTH_RADIUS;\n\n      s = Math.round(s * 10000) / 10000; //输出为公里\n\n      var distance = s;\n      var distance_str = \"\";\n\n      if (parseInt(distance) >= 1) {\n        distance_str = distance.toFixed(1) + \"km\";\n      } else {\n        distance_str = distance * 1000 + \"m\";\n      } //s=s.toFixed(4);\n\n\n      console.info('lyj 距离是', s);\n      console.info('lyj 距离是', distance_str);\n      return s;\n    },\n    initMap: function initMap() {\n      var AMapUI = this.AMapUI = window.AMapUI;\n      var AMap = this.AMap = window.AMap;\n      var map = new AMap.Map('container', {\n        zoom: 9\n      });\n      AMapUI.loadUI(['misc/MarkerList', 'overlay/SimpleMarker', 'overlay/SimpleInfoWindow'], function (MarkerList) {\n        //启动页面\n        initPage(MarkerList);\n      });\n\n      function initPage(MarkerList) {\n        //创建一个实例\n        var markerList = new MarkerList({\n          map: map,\n          //关联的map对象\n          listContainer: document.getElementById(\"myList\"),\n          //列表的dom容器的节点或者id, 用于放置getListElement返回的内容\n          getDataId: function getDataId(dataItem, index) {\n            //返回数据项的Id\n            return dataItem.id;\n          },\n          getPosition: function getPosition(dataItem) {\n            //返回数据项的经纬度，AMap.LngLat实例或者经纬度数组\n            return dataItem.position;\n          },\n          getMarker: function getMarker(dataItem, context, recycledMarker) {\n            var content = '标注: ' + (context.index + 1) + '',\n                label = {\n              offset: new AMap.Pixel(16, 18),\n              content: content\n            };\n\n            if (recycledMarker) {\n              //存在可回收利用的marker,直接setLabel返回\n              recycledMarker.setLabel(label);\n              return recycledMarker;\n            } //返回一个新的Marker\n\n\n            return new AMap.Marker({\n              label: label\n            });\n          },\n          getInfoWindow: function getInfoWindow(dataItem, context, recycledInfoWindow) {\n            var tpl = '<p><%- dataItem.id %>：<%- dataItem.desc %><p>'; //MarkerList.utils.template支持underscore语法的模板\n\n            var content = MarkerList.utils.template(tpl, {\n              dataItem: dataItem,\n              dataIndex: context.index\n            });\n\n            if (recycledInfoWindow) {\n              //存在可回收利用的infoWindow, 直接setContent返回\n              recycledInfoWindow.setContent(content);\n              return recycledInfoWindow;\n            } //返回一个新的InfoWindow\n\n\n            return new AMap.InfoWindow({\n              offset: new AMap.Pixel(0, -23),\n              content: content\n            });\n          },\n          getListElement: function getListElement(dataItem, context, recycledListElement) {\n            var tpl = '<p><%- dataItem.id %>：<%- dataItem.desc %><p>';\n            var content = MarkerList.utils.template(tpl, {\n              dataItem: dataItem,\n              dataIndex: context.index\n            });\n\n            if (recycledListElement) {\n              //存在可回收利用的listElement, 直接更新内容返回\n              recycledListElement.innerHTML = content;\n              return recycledListElement;\n            } //返回一段html，MarkerList将利用此html构建一个新的dom节点\n\n\n            return '<li>' + content + '</li>';\n          }\n        }); //监听选中改变\n\n        markerList.on('selectedChanged', function (event, info) {}); //监听Marker和ListElement上的点击，详见markerEvents，listElementEvents\n\n        markerList.on('markerClick listElementClick', function (event, record) {}); //构建数据源，数据项本身没有格式要求，但需要支持getDataId和getPosition\n\n        var data = [{\n          id: 'A',\n          position: [116.020764, 39.904989],\n          desc: '数据_1'\n        }, {\n          id: 'B',\n          position: [116.405285, 39.904989],\n          desc: '数据_2'\n        }, {\n          id: 'C',\n          position: [116.789806, 39.904989],\n          desc: '数据_3'\n        }]; //绘制数据源，Let's go!\n\n        markerList.render(data); //清除数据\n        //markerList.render([]);\n      }\n    },\n    // 实例化地图\n    initMap1: function initMap1() {\n      var _this = this;\n\n      var dialog = this.$common.dialog1,\n          data = {\n        name: ''\n      }; //dialog.loading();\n      // 加载PositionPicker，loadUI的路径参数为模块名中 'ui/' 之后的部分\n\n      var AMapUI = this.AMapUI = window.AMapUI;\n      var AMap = this.AMap = window.AMap;\n      AMapUI.loadUI(['misc/PositionPicker'], function (PositionPicker) {\n        dialog.close();\n        var mapConfig = {\n          zoom: 16,\n          cityName: MapCityName,\n          lang: \"en\"\n        };\n\n        if (_this.lat && _this.lng) {\n          mapConfig.center = [_this.lng, _this.lat];\n        }\n\n        var map = new AMap.Map('js-container', mapConfig); // 加载地图搜索插件\n\n        AMap.service('AMap.PlaceSearch', function () {\n          _this.placeSearch = new AMap.PlaceSearch({\n            pageSize: 5,\n            pageIndex: 1,\n            citylimit: true,\n            city: MapCityName,\n            map: map,\n            panel: 'js-result'\n          });\n        }); // 启用工具条\n        // AMap.plugin(['AMap.ToolBar'], function () {\n        //   map.addControl(new AMap.ToolBar({\n        //     position: 'RB'\n        //   }))\n        // })\n        // 创建地图拖拽\n\n        var positionPicker = new PositionPicker({\n          mode: 'dragMarker',\n          // 设定为拖拽地图模式，可选'dragMap'、'dragMarker'，默认为'dragMap'\n          map: map // 依赖地图对象\n\n        }); // 拖拽完成发送自定义 drag 事件\n\n        positionPicker.on('success', function (positionResult) {\n          // 过滤掉初始化地图后的第一次默认拖放\n          if (!_this.dragStatus) {\n            _this.dragStatus = true;\n          } else {\n            _this.$emit('drag', positionResult);\n\n            console.log(positionResult);\n          }\n        }); // 启动拖放\n\n        positionPicker.start();\n      });\n    }\n  },\n  created: function () {\n    var _created = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function created() {\n      return _created.apply(this, arguments);\n    };\n  }()\n};",{"version":3,"sources":["mapDrag.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n  描述：拖放地图组件，默认尺寸是 500 * 300\n\n  接收属性参数：\n    lat: 纬度\n    lng: 经度\n\n  自定义事件：\n    drag: 拖放完成事件\n\n  示例：\n    <mapDrag @drag=\"dragMap\" lat=\"22.574405\" lng=\"114.095388\"></mapDrag>\n-->\n<template>\n  <div>\n    <!--    <div class=\"m-map\">-->\n    <!--      <div id=\"js-container\" class=\"map\">-->\n    <!--        正在加载数据 ...-->\n    <!--      </div>-->\n\n    <!--    </div>-->\n\n\n    <div class=\"input_card\" >\n      测试ing\n      毛玻璃效果\n      <div  @click=\"testDialog\">测试dialog</div>\n      <div>{{$lang('userName')}}-2</div>\n      <div>{{$lang('message')}}</div>----{{$t('status')}}\n    </div>\n\n    <div id=\"outer-box\">\n      <div id=\"container\" tabindex=\"0\"></div>\n      <div id=\"panel\" class=\"scrollbar1\">\n        <ul id=\"myList\">\n        </ul>\n      </div>\n    </div>\n    <!--    <div class=\"input_card1\" ref=\"card\"  @touchstart=\"touchstart\" @touchend=\"touchend\" :class=\"{'top_location':!isBottom}\"></div>-->\n  </div>\n</template>\n\n<script>\n  import remoteLoad from '@/utils/remoteLoad.js'\n  import { MapKey, MapCityName } from '@/config/config'\n  import testData from  '@/mock.js'\n  import dialog from \"../utils/dialog\";\n\n  export default {\n    props: ['lat', 'lng'],\n    data () {\n      return {\n        searchKey: '',\n        placeSearch: null,\n        dragStatus: false,\n        AMapUI: null,\n        AMap: null,\n        startY:0,\n        isBottom:true,\n        lang: 'zh-CN'\n      }\n    },\n    watch: {\n      searchKey () {\n        if (this.searchKey === '') {\n          this.placeSearch.clear()\n        }\n      }\n    },\n    mounted(){\n\n    },\n    methods: {\n      setLang(lang){\n        this.$common.setLang(lang);\n        this.$forceUpdate();\n      },\n\n      ConvertDegreesToRadians(degrees){\n        return degrees * Math.PI / 180;\n      },\n\n      ConvertRadiansToDegrees(radian){\n        return radian * 180.0 / Math.PI;\n      },\n\n      HaverSin(theta){\n        let v = Math.sin(theta / 2);\n        return v*v\n      },\n\n      getDistance(latitude1,longitude1,latitude,longitude){\n        let app = this;\n        let lat1 = app.ConvertDegreesToRadians(latitude1),\n                lon1 = app.ConvertDegreesToRadians(longitude1),\n                lat2 = app.ConvertDegreesToRadians(latitude),\n                lon2 = app.ConvertDegreesToRadians(longitude),\n                vLon = Math.abs(lon1 - lon2),\n                vLat = Math.abs(lat1 - lat2),\n                h = app.HaverSin(vLat) + Math.cos(lat1) * Math.cos(lat2) * app.HaverSin(vLon);\n        return Math.round(12742 * Math.asin(Math.sqrt(h)) * 1000);\n      },\n      testDialog(){\n        let d =this.getDistance1(40.22077,116.23128,34.23053,108.93425)\n        console.log(99999,d)\n        let dialog = this.$common.dialog1,app=this;\n        let imgSrc = require('../assets/img/map.png');\n        dialog.open({\n          // type:\"tip\",\n          title : '',\n          hideCloseBtn:this.show,\n          content : '<div @click=\"test\">暂时部署不足hiuhiuhohggygilo;<br></div>',\n          data :{\n            imgSrc:imgSrc,\n            show: true\n          },\n          methods:{\n            test(){\n              console.log(12,this);\n              this.show = false;\n              // this.parent.close();\n\n            }\n          },\n          isFull: true,\n          btns : [\n            {\n              value : '取消',\n              action(obj){\n                dialog.close();\n              }\n            }\n          ]\n        })\n      },\n      // 搜索\n      handleSearch () {\n        if (this.searchKey) {\n          this.placeSearch.search(this.searchKey)\n        }\n      },\n\n      // 根据经纬度计算距离，参数分别为第一点的纬度，经度；第二点的纬度，经度\n      getDistance1(lat1, lng1, lat2, lng2) {\n        function rad(degrees) {\n          return degrees * Math.PI / 180;\n        };\n        var radLat1 = rad(lat1);\n        var radLat2 = rad(lat2);\n        var a = radLat1 - radLat2;\n        var b = rad(lng1) - rad(lng2);\n        var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) +\n                Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)));\n        s = s * 6378.137; // EARTH_RADIUS;\n        s = Math.round(s * 10000) / 10000; //输出为公里\n\n        var distance = s;\n        var distance_str = \"\";\n\n        if (parseInt(distance) >= 1) {\n          distance_str = distance.toFixed(1) + \"km\";\n        } else {\n          distance_str = distance * 1000 + \"m\";\n        }\n\n        //s=s.toFixed(4);\n\n        console.info('lyj 距离是', s);\n        console.info('lyj 距离是', distance_str);\n        return s;\n      },\n\n      initMap(){\n        let AMapUI = this.AMapUI = window.AMapUI\n        let AMap = this.AMap = window.AMap;\n        var map = new AMap.Map('container', {\n          zoom: 9\n        });\n        AMapUI.loadUI(['misc/MarkerList', 'overlay/SimpleMarker', 'overlay/SimpleInfoWindow'], function(MarkerList) {\n          //启动页面\n          initPage(MarkerList);\n        });\n        function initPage(MarkerList) {\n          //创建一个实例\n          var markerList = new MarkerList({\n            map: map, //关联的map对象\n            listContainer: document.getElementById(\"myList\"), //列表的dom容器的节点或者id, 用于放置getListElement返回的内容\n            getDataId: function(dataItem, index) {\n              //返回数据项的Id\n              return dataItem.id;\n            },\n            getPosition: function(dataItem) {\n              //返回数据项的经纬度，AMap.LngLat实例或者经纬度数组\n              return dataItem.position;\n            },\n            getMarker: function(dataItem, context, recycledMarker) {\n              var content = '标注: ' + (context.index + 1) + '',\n                      label = {\n                        offset: new AMap.Pixel(16, 18),\n                        content: content\n                      };\n              if (recycledMarker) {\n                //存在可回收利用的marker,直接setLabel返回\n                recycledMarker.setLabel(label);\n                return recycledMarker;\n              }\n              //返回一个新的Marker\n              return new AMap.Marker({\n                label: label\n              });\n            },\n            getInfoWindow: function(dataItem, context, recycledInfoWindow) {\n              var tpl = '<p><%- dataItem.id %>：<%- dataItem.desc %><p>';\n              //MarkerList.utils.template支持underscore语法的模板\n              var content = MarkerList.utils.template(tpl, {\n                dataItem: dataItem,\n                dataIndex: context.index\n              });\n              if (recycledInfoWindow) {\n                //存在可回收利用的infoWindow, 直接setContent返回\n                recycledInfoWindow.setContent(content);\n                return recycledInfoWindow;\n              }\n              //返回一个新的InfoWindow\n              return new AMap.InfoWindow({\n                offset: new AMap.Pixel(0, -23),\n                content: content\n              });\n            },\n            getListElement: function(dataItem, context, recycledListElement) {\n              var tpl = '<p><%- dataItem.id %>：<%- dataItem.desc %><p>';\n              var content = MarkerList.utils.template(tpl, {\n                dataItem: dataItem,\n                dataIndex: context.index\n              });\n              if (recycledListElement) {\n                //存在可回收利用的listElement, 直接更新内容返回\n                recycledListElement.innerHTML = content;\n                return recycledListElement;\n              }\n              //返回一段html，MarkerList将利用此html构建一个新的dom节点\n              return '<li>' + content + '</li>';\n            }\n          });\n          //监听选中改变\n          markerList.on('selectedChanged', function(event, info) {});\n\n          //监听Marker和ListElement上的点击，详见markerEvents，listElementEvents\n          markerList.on('markerClick listElementClick', function(event, record) {});\n\n          //构建数据源，数据项本身没有格式要求，但需要支持getDataId和getPosition\n          var data = [{\n            id: 'A',\n            position: [116.020764, 39.904989],\n            desc: '数据_1'\n          },\n            {\n              id: 'B',\n              position: [116.405285, 39.904989],\n              desc: '数据_2'\n            },\n            {\n              id: 'C',\n              position: [116.789806, 39.904989],\n              desc: '数据_3'\n            }];\n          //绘制数据源，Let's go!\n          markerList.render(data);\n\n          //清除数据\n          //markerList.render([]);\n\n        }\n      },\n      // 实例化地图\n      initMap1 () {\n        let dialog = this.$common.dialog1, data={name:''};\n        //dialog.loading();\n        // 加载PositionPicker，loadUI的路径参数为模块名中 'ui/' 之后的部分\n        let AMapUI = this.AMapUI = window.AMapUI\n        let AMap = this.AMap = window.AMap\n        AMapUI.loadUI(['misc/PositionPicker'], PositionPicker => {\n          dialog.close();\n          let mapConfig = {\n            zoom: 16,\n            cityName: MapCityName,\n            lang: \"en\",\n          }\n          if (this.lat && this.lng) {\n            mapConfig.center = [this.lng, this.lat]\n          }\n          let map = new AMap.Map('js-container', mapConfig)\n          // 加载地图搜索插件\n          AMap.service('AMap.PlaceSearch', () => {\n            this.placeSearch = new AMap.PlaceSearch({\n              pageSize: 5,\n              pageIndex: 1,\n              citylimit: true,\n              city: MapCityName,\n              map: map,\n              panel: 'js-result',\n\n            })\n          })\n\n          // 启用工具条\n          // AMap.plugin(['AMap.ToolBar'], function () {\n          //   map.addControl(new AMap.ToolBar({\n          //     position: 'RB'\n          //   }))\n          // })\n          // 创建地图拖拽\n          let positionPicker = new PositionPicker({\n            mode: 'dragMarker', // 设定为拖拽地图模式，可选'dragMap'、'dragMarker'，默认为'dragMap'\n            map: map // 依赖地图对象\n          })\n          // 拖拽完成发送自定义 drag 事件\n          positionPicker.on('success', positionResult => {\n            // 过滤掉初始化地图后的第一次默认拖放\n            if (!this.dragStatus) {\n              this.dragStatus = true\n            } else {\n              this.$emit('drag', positionResult);\n              console.log(positionResult)\n            }\n          })\n          // 启动拖放\n          positionPicker.start();\n\n\n        })\n      }\n    },\n    async created () {\n      // 已载入高德地图API，则直接初始化地图\n\n      // if (window.AMap && window.AMapUI) {\n      //   this.initMap()\n      //   // 未载入高德地图API，则先载入API再初始化\n      // } else {\n      //   await remoteLoad(`http://webapi.amap.com/maps?v=1.3&key=${MapKey}`)\n      //   await remoteLoad('http://webapi.amap.com/ui/1.0/main.js')\n      //   this.initMap()\n      // }\n    }\n  }\n</script>\n<style lang=\"less\">\n  .shareImg{\n    position: absolute;\n    top: 120%;\n    >img{\n      height: 30px;\n      width: 100px;\n    }\n  }\n  .testImg{\n    background-color:rebeccapurple;\n    width: 300px;\n    height: 200px;\n    .btns .btnBorder{\n      color: #67c23a;\n    }\n    .bt{\n      position: absolute;\n      bottom: 0;\n    }\n  }\n</style>\n<style lang=\"less\" scoped>\n  #container{\n    height:100%;\n    width:100%;\n  }\n  .amap-icon img{\n    width: 25px;\n    height: 34px;\n  }\n  @import \"../assets/css/var.less\";\n  .m-map{\n    height: 100vh;\n    width: 100vh;\n    .map{\n      width: 100vh;\n      height: 100vh;\n    }\n\n  }\n  .input_card{\n    position: absolute;\n    background-color: white;\n    filter: opacity(0.8);\n    height: 40vh;\n    width: 100vh;\n    bottom: 0;\n    border-radius: 20px 20px 0 0;\n    z-index: 9999;\n    font-weight: bold;\n    .duration();\n\n  }\n  .top_location{\n    top: 10px;\n    height: 100%;\n  }\n  .input_card1{\n    position: absolute;\n    height: 40vh;\n    width: 100vh;\n    bottom: 0;\n    border-radius: 20px 20px 0 0;\n    z-index: 998;\n    .blur(3px);\n  }\n</style>\n"],"sourceRoot":"src/components"}]}